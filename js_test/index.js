// ########
// QUESTION 1
// ########
const expense = {
    type : 'Business',
    amount: '$50'
}
const {type, amount} = expense;


// ########
// QUESTION 2
// ########
const word = '422aa224';
function isPalindrome(palindrome) {
    const p = palindrome.split('');
    return p.every((letter, i) => {
        return letter === p[p.length - (i + 1)];
    })
}
// output
console.warn(isPalindrome(word));



// ########
// QUESTION 3 
// ########
let fruits = ['Apple', 'Apricot', 'Avocado', 'banana', 'Blackberry', 'Blueberry', 'Boysenberry', 'Crab apples',
'Currant', 'Cherry', 'Cherimoya', 'Chico fruit', 'Coconut', 'Cranberry', 'Custard apple', 'Date', 'dragonfruit', 'durian',
'Elderberry', 'Feijoa', 'Fig', 'Goji berry', 'Gooseberry', 'grape', 'Grapefruit', 'Guava', 'Honeyberry', 'Huckleberry',
'Jabuticaba', 'Jackfruit', 'Jambul', 'jujube', 'Juniper berry', 'Kiwifruit', 'Kumquat', 'Lemon', 'Lime', 'Loquat',
'Longan', 'Lychee', 'Mango', 'Mangosteen', 'Marionberry', 'Melon', 'Cantaloupe', 'Honeydew', 'Watermelon',
'Miracle fruit', 'Mulberry', 'Nectarine', 'Nance', 'Olive', 'Orange', 'Blood orange', 'Clementine', 'Mandarine',
'Tangerine', 'Papaya', 'Passionfruit', 'Peach', 'Pear', 'Persimmon', 'Plantain', 'Plum', 'Prune', 'Pineapple', 'Pluot',
'Pomegranate', 'Pomelo', 'Quince', 'Raspberry', 'Rambutan', 'Redcurrant', 'Salal berry', 'Salak', 'Salmonberry',
'Satsuma', 'Soursop', 'Star fruit', 'Strawberry', 'Tamarillo', 'Tamarind', 'Ugli fruit', 'Yuzu']

function isFruit(food) {
    return fruits.findIndex(f => f.toLowerCase() == food.toLowerCase()) != -1;
}
// output
console.warn(isFruit('apple'));



// ########
// QUESTION 4
// ########
let productCart = [
    { productname:'iphone-x', qty: 10, price: 1000 },
    { productname:'macbook pro', qty: 200, price: 2000},
    { productname:'iwatch', qty: 100, price: 550 },
    { productname:'macbook air', qty: 100, price: 1000},
    { productname:'iphone 8', qty: 300, price: 700 },
    { productname:'iphone 7', qty: 100, price: 550 },
    { productname:'ipad Retina', qty: 20, price: 1000},
    { productname:'ipad', qty: 10, price: 700 },
    { productname:'Magic Mouse', qty: 50, price: 300},
    { productname:'Magic Trackpad', qty: 75, price: 200}
]

function CostOfProductForQtyGreaterThan(n) {
    return productCart.reduce((cost, item) => {
        if (item.qty > n) {
            cost += item.price
        }
        return cost;
    }, 0);
}

function CostOfProduct(product) {
    return productCart.find(p => p.productname === product).price
}
// output
console.warn(CostOfProductForQtyGreaterThan(0));
console.warn(CostOfProduct('ipad Retina'));



// ########
// QUESTION 5
// ########
const team = {
    members:['Superman','Batman','Wonder Woman'],
    teamName: 'Justice league',
    teamSummary: function() {
        return this.members.map(member => {
            return `${member} is on team ${this.teamName}`;
        });
    }
};
team.teamSummary();
// 1) There will be undefined in this.teamName
// 2) Arrow function does not create its own lexical scoping